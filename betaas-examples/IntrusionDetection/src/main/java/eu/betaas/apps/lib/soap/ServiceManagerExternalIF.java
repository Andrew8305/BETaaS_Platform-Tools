/*
Copyright 2014-2015 Intecs Spa

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package eu.betaas.apps.lib.soap;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2014-10-13T16:50:23.700+02:00
 * Generated source version: 2.7.6
 * 
 */
@WebServiceClient(name = "ServiceManagerExternalIF", 
                  wsdlLocation = "file:/C:/Users/nicola/AppData/Local/Temp/tempdir8190522562031065842.tmp/sm-service_1.wsdl",
                  targetNamespace = "http://api.servicemanager.service.betaas.eu/") 
public class ServiceManagerExternalIF extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://api.servicemanager.service.betaas.eu/", "ServiceManagerExternalIF");
    public final static QName ServiceManagerExternalIFPort = new QName("http://api.servicemanager.service.betaas.eu/", "ServiceManagerExternalIFPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/nicola/AppData/Local/Temp/tempdir8190522562031065842.tmp/sm-service_1.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ServiceManagerExternalIF.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/nicola/AppData/Local/Temp/tempdir8190522562031065842.tmp/sm-service_1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ServiceManagerExternalIF(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ServiceManagerExternalIF(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ServiceManagerExternalIF() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ServiceManagerExternalIF(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ServiceManagerExternalIF(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public ServiceManagerExternalIF(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName);
    }

    /**
     *
     * @return
     *     returns ServiceManagerExternalIFPortType
     */
    @WebEndpoint(name = "ServiceManagerExternalIFPort")
    public ServiceManagerExternalIFPortType getServiceManagerExternalIFPort() {
        return super.getPort(ServiceManagerExternalIFPort, ServiceManagerExternalIFPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServiceManagerExternalIFPortType
     */
    @WebEndpoint(name = "ServiceManagerExternalIFPort")
    public ServiceManagerExternalIFPortType getServiceManagerExternalIFPort(WebServiceFeature... features) {
        return super.getPort(ServiceManagerExternalIFPort, ServiceManagerExternalIFPortType.class, features);
    }

}
