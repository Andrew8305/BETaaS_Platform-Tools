/*
 Copyright 2014-2015 Hewlett-Packard Development Company, L.P.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
package eu.betaas.taas.bigdatamanager.database.hibernate.data;

import java.io.Serializable;
import java.util.UUID;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.GenericGenerator;

@Entity

// NOTE In the first release of the betaas platform the field agreement_id is not used, we remove the unique constraint 

//@Table( name = "PERSISTENT_AGREEMENT_CONTAINER" ,
//        uniqueConstraints = @UniqueConstraint( columnNames = "agreement_id" ) )

@Table( name = "PERSISTENT_AGREEMENT_CONTAINER" )  

@NamedQueries( {
@NamedQuery( name = "PersistentAgreementContainerDatabase.findAll",
       query = "SELECT p FROM PersistentAgreementContainerDatabase p" ),
@NamedQuery( name = "PersistentAgreementContainerDatabase.findByAgreementId",
       query = "SELECT p FROM PersistentAgreementContainerDatabase p "
       + "WHERE p.agreementId = :agreementId" ),
@NamedQuery( name = "PersistentAgreementContainerDatabase.findByAgreementAndFactoryId",
       query = "SELECT p FROM PersistentAgreementContainerDatabase p "
       + "WHERE p.agreementId = :agreementId AND p.agreementFactoryId = :agreementFactoryId" ),
@NamedQuery( name = "PersistentAgreementContainerDatabase.findAllByAgreementFactoryId",
      query = "SELECT p FROM PersistentAgreementContainerDatabase p "
      + "WHERE p.agreementFactoryId = :agreementFactoryId" ) } )

public  class PersistentAgreementContainerDatabase implements Serializable  {

    /**
	 * 
	 */
    @Transient
    public static final int AGREEMENT_CONTEXT_SIZE = 1638400;
	
	private static final long serialVersionUID = 1L;
	
    // primary-key of the stored entity
    @Id
    @Column( name = "id" )
    @GeneratedValue( strategy = GenerationType.TABLE )
    @Basic( optional = false )
    public Integer id;

    // agreement id
    @GeneratedValue(generator = "system-uuid") // FIX: It does not work...the UUID should be generated by the table to assure 100% unique field
    @GenericGenerator(name = "system-uuid", strategy = "org.hibernate.id.UUIDGenerator")
    @Column( name = "agreement_id", unique = true )
    //@Basic( optional = false )
    public String agreementId;

    // original agreement factory id
    @Column( name = "agreement_factory_id", nullable = false )
    @Basic( optional = false )
    public String agreementFactoryId;

    //
    // state of the agreement, this state is only used in db queries
    //
    @Column( name = "state", nullable = false )
    @Basic( optional = false )
    public String state;

    // original agreement class name
    @Column( name = "agreement_class_name", nullable = false )
    @Basic( optional = false )
    public String agreementClassName;

    // context-type of the agreement
    @Lob
    @Column( name = "persisted_agreement_context_type", nullable = false, length = AGREEMENT_CONTEXT_SIZE )
    @Basic( optional = false, fetch = FetchType.LAZY )
    public String persistedAgreementContextType;


    public PersistentAgreementContainerDatabase(PersistentAgreementContainerDatabase c){
    	if( c.agreementId == null ){
    		// First time in the database..., the agreement id is not provided
    		agreementId= UUID.randomUUID().toString(); // FIX H2 seems to be not so good at autogenerating string (shall it?? dunno...) -> let's do it manually before insertion
    	} else {
    		agreementId=c.agreementId;
    		id=c.id;
    	}
        agreementFactoryId=c.agreementFactoryId;
        state=c.state;
        agreementClassName=c.agreementClassName;
        persistedAgreementContextType=c.persistedAgreementContextType;
    }

    public PersistentAgreementContainerDatabase(){
    }

  
   	public Integer getId() {
		return id;
	}

    
    
	public String getAgreementId() {
		return agreementId;
	}

	public void setAgreementId(String agreementId) {
		this.agreementId = agreementId;
	}

	public String getAgreementFactoryId() {
		return agreementFactoryId;
	}

	public void setAgreementFactoryId(String agreementFactoryId) {
		this.agreementFactoryId = agreementFactoryId;
	}

	public String getStateString() {
		return state;
	}

	public void setStateString(String state) {
		this.state = state;
	}

	public String getAgreementClassName() {
		return agreementClassName;
	}

	public void setAgreementClassName(String agreementClassName) {
		this.agreementClassName = agreementClassName;
	}

	public String getPersistedAgreementContextTypeString() {
		return persistedAgreementContextType;
	}

	public void setPersistedAgreementContextTypeString(
			String persistedAgreementContextType) {
		this.persistedAgreementContextType = persistedAgreementContextType;
	}
	
	
	
}
